- name: "Configure Kubernetes"
  hosts: localhost
  tasks:
    - name: Getting Kube cluster
      command: az aks get-credentials --resource-group project_kube --name kube --overwrite-existing

    - name: Creation of argocd Namespace
      command:  kubectl create ns argocd
      ignore_errors: true

    - name: Creation of Monitoring Namespace
      command:  kubectl create ns monitoring
      ignore_errors: true

    - name: Apply ARGOCD to cluster
      command: kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
      ignore_errors: true


    - name: Backup current ArgoCD server service definition
      shell: |
        kubectl get service/argocd-server -n argocd -o yaml > /tmp/argocd-server-service.yaml


    - name: Apply loadbalancer instead of clusterIP
      shell: |
        sed -i 's/ClusterIP/LoadBalancer/g' /tmp/argocd-server-service.yaml && \
        kubectl apply -n argocd -f /tmp/argocd-server-service.yaml
      ignore_errors: true

    - name: Wait for external IP to be assigned to ArgoCD server service
      shell: |
        while [ -z "$(kubectl get service argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}')" ]; do
          echo "Waiting for LoadBalancer IP..." && sleep 5;
        done

    - name: Get ArgoCD server external IP
      shell: kubectl get service argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
      register: argocd_server_ip

    - name: Print ArgoCD server external IP
      debug:
        msg: "ArgoCD Server External IP: {{ argocd_server_ip.stdout }}"

    - name: Get ArgoCD initial admin password
      shell: kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath='{.data.password}' | base64 -d
      register: argocd_admin_password

    - name: Print ArgoCD initial admin password
      debug:
        msg: "ArgoCD Initial Admin Password: {{ argocd_admin_password.stdout }}"

    - name: Add repos for monitoring
      shell: |
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo add kube-state-metrics https://kubernetes.github.io/kube-state-metrics
        helm repo add grafana https://grafana.github.io/helm-charts
        helm repo update
      ignore_errors: true

    - name: Apply GRAFANA password
      shell: kubectl apply -n monitoring -f monitoring-secrets.yaml
      ignore_errors: true
    - name: Install Prometheus and grafana
      shell: |
        helm install \
        --namespace=monitoring \
        --version=26.0.0 \
        --set=service.type=LoadBalancer \
        prometheus \
        prometheus-community/prometheus
        
        helm install \
        --namespace=monitoring \
        --version=8.6.4 \
        --set=admin.existingSecret=grafana-auth \
        --set=service.type=LoadBalancer \
        grafana \
        grafana/grafana
      ignore_errors: true

    - name: Backup current Prometheus server service definition
      shell: |
        kubectl get service/prometheus-server -n monitoring -o yaml > /tmp/prometheus-server-service.yaml


    - name: Apply loadbalancer instead of clusterIP
      shell: |
        sed -i 's/ClusterIP/LoadBalancer/g' /tmp/prometheus-server-service.yaml && \
        kubectl apply -n monitoring -f /tmp/prometheus-server-service.yaml
      ignore_errors: true

    - name: Wait for external IP to be assigned to Prometheus server service
      shell: |
        while [ -z "$(kubectl get service prometheus-server -n monitoring -o jsonpath='{.status.loadBalancer.ingress[0].ip}')" ]; do
          echo "Waiting for LoadBalancer IP..." && sleep 5;
        done

    - name: Get Prometheus server external IP
      shell: kubectl get service prometheus-server -n monitoring -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
      register: prom_server_ip

    - name: Print Prometheus server external IP
      debug:
        msg: "Prometheus Server External IP: {{ prom_server_ip.stdout }}"

    - name: Get Grafana server external IP
      shell: kubectl get service grafana -n monitoring -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
      register: grafana_server_ip

    - name: Print Grafana server external IP
      debug:
        msg: "Grafana Server External IP: {{ grafana_server_ip.stdout }}"