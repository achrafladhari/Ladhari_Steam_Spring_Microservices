services:

  config-server:
    build:
      context: ./config-server
    container_name: config-server
    ports:
      - 8888:8888
    volumes:
      - config-server:/app
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost","8888"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s
    networks:
      - microservices

  discovery-service:
    build:
      context: ./discovery-service
    container_name: discovery-service
    ports:
      - 8761:8761
    volumes:
      - discovery-service:/app
    environment:
      EUREKA_HOSTNAME_DISCOVERY: discovery-service
      CONFIG_SERVER_URL: optional:configserver:http://config-server:8888
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost","8761"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s
    networks:
      - microservices
    depends_on:
      config-server:
        condition: service_healthy

  jenkins:
    image: salahgo/jenkins:dind
    container_name: jenkins
    ports:
      - 8010:8080
      - 50000:50000
    privileged: true
    volumes:
      - /var/lib/docker/volumes/jenkins_home/_data:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/bin/docker:/usr/bin/docker
    networks:
      - microservices


  gateway:
    build:
      context: ./gateway
    container_name: gateway
    ports:
      - 8222:8222
    volumes:
      - gateway:/app
    environment:
      EUREKA_HOSTNAME_GATEWAY: gateway
      CONFIG_SERVER_URL: optional:configserver:http://config-server:8888
      EUREKA_DEFAULT_ZONE: http://discovery-service:8761/eureka
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost","8222"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s
    networks:
      - microservices
    depends_on:
      discovery-service:
        condition: service_healthy


  games-service:
    build:
      context: ./games-service
    container_name: games-service
    environment:
      DB_URL: jdbc:postgresql://ms_pg_sql:5432/steam
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      EUREKA_HOSTNAME_GAMES: games-service
      CONFIG_SERVER_URL: optional:configserver:http://config-server:8888
      EUREKA_DEFAULT_ZONE: http://discovery-service:8761/eureka
    volumes:
      - games-service:/app
    networks:
      - microservices
    depends_on:
      gateway:
        condition: service_healthy

  library-service:
    build:
      context: ./library-service
    container_name: library-service
    volumes:
      - library-service:/app
    environment:
      EUREKA_HOSTNAME_LIBRARY: library-service
      MONGO_HOST: mongo_db
      EUREKA_DEFAULT_ZONE: http://discovery-service:8761/eureka
      CONFIG_SERVER_URL: optional:configserver:http://config-server:8888
    networks:
      - microservices
    depends_on:
      gateway:
        condition: service_healthy

  order-service:
    build:
      context: ./order-service
    container_name: order-service
    volumes:
      - order-service:/app
    environment:
      USER_URL: http://user-service:8222/api/v1/users
      LIBRARY_URL: http://library-service:8222/api/v1/library
      GAMES_URL: http://games-service:8222/api/v1/games
      PAYMENT_URL: http://payment-service:8222/api/v1/payments
      DB_URL: jdbc:postgresql://ms_pg_sql:5432/steam
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      EUREKA_HOSTNAME_ORDER: order-service
      EUREKA_DEFAULT_ZONE: http://discovery-service:8761/eureka
      CONFIG_SERVER_URL: optional:configserver:http://config-server:8888
    networks:
      - microservices
    depends_on:
      gateway:
        condition: service_healthy

  payment-service:
    build:
      context: ./payment-service
    container_name: payment-service
    volumes:
      - payment-service:/app
    environment:
      DB_URL: jdbc:postgresql://ms_pg_sql:5432/steam
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      EUREKA_HOSTNAME_PAYMENT: payment-service
      EUREKA_DEFAULT_ZONE: http://discovery-service:8761/eureka
      CONFIG_SERVER_URL: optional:configserver:http://config-server:8888

    networks:
      - microservices
    depends_on:
      gateway:
        condition: service_healthy

  user-service:
    build:
      context: ./user-service
    container_name: user-service
    volumes:
      - user-service:/app
    environment:
      LIBRARY_URL: http://library-service:8222/api/v1/library
      EUREKA_HOSTNAME_USER: user-service
      MONGO_HOST: mongo_db
      EUREKA_DEFAULT_ZONE: http://discovery-service:8761/eureka
      CONFIG_SERVER_URL: optional:configserver:http://config-server:8888
    networks:
      - microservices
    depends_on:
      gateway:
        condition: service_healthy

  client:
    build:
      context: ./UI_Spring
    container_name: client
    volumes:
      - client:/app
    ports:
      - 80:80
    networks:
      - microservices
    depends_on:
      - user-service


  sonarqube:
    image: sonarqube:latest
    container_name: sonarqube
    depends_on:
      - postgresql
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://ms_pg_sql:5432/sonar
      SONAR_JDBC_USERNAME: postgres
      SONAR_JDBC_PASSWORD: postgres
    ports:
      - "9000:9000"
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    networks:
      - microservices

  mongodb:
    image: mongo
    container_name: mongo_db
    ports:
      - 27017:27017
    volumes:
      - mongo:/data
    environment:
      - MONGO_INITDB_ROOT_USERNAME=achraf
      - MONGO_INITDB_ROOT_PASSWORD=ladhari02
    networks:
      - microservices

  mongo-express:
    image: mongo-express
    container_name: mongo_express
    restart: always
    volumes:
      - mongo-express:/data
    ports:
      - 8081:8081
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=achraf
      - ME_CONFIG_MONGODB_ADMINPASSWORD=ladhari02
      - ME_CONFIG_MONGODB_SERVER=mongodb
    networks:
      - microservices

  postgresql:
    container_name: ms_pg_sql
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - microservices
    restart: unless-stopped

  pgadmin:
    container_name: ms_pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - microservices
    restart: unless-stopped

networks:
  microservices:
    driver: bridge

volumes:
  mongo:
  postgres:
  pgadmin:
  user-service:
  order-service:
  payment-service:
  library-service:
  gateway:
  config-server:
  discovery-service:
  games-service:
  mongo-express:
  client:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs: